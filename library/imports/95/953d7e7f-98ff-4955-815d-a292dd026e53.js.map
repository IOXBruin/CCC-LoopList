{"version":3,"sources":["assets/looplist/LoopListGrid.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import LoopList, { Movement } from \"./LoopList\";\n\nconst {ccclass, property, menu, disallowMultiple} = cc._decorator;\n\n@ccclass\n@disallowMultiple()\n@menu(\"UIExtension/LoopListGrid\")\nexport default class LoopListGrid extends LoopList{\n\n    /// 格子数量 默认为2, 大于2时表示一行有多个或一列有多个 采用 左到右或上到下排列方式\n    @property( cc.Integer)\n    private gridCount: number = 2\n    \n    /// grid item 开始位置\n    centers: number[] = [];\n\n    /// 计算grid 的中心\n    _calculateBoundary(){\n        super._calculateBoundary()\n        if( this.content){\n            this.centers.length = this.gridCount\n            switch( this.movement) {\n                case Movement.Horizontal:{\n                    let step = this.content.height / this.gridCount\n                    let start = this.content.height * 0.5 - step*0.5\n                    for( let idx = 0; idx < this.gridCount; idx++){\n                        this.centers[idx] = start - step*idx\n                    }\n                } break;\n                case Movement.Vertical: {\n                    let step = this.content.width / this.gridCount\n                    let start = -this.content.width * 0.5 + step*0.5\n                    for( let idx = 0; idx < this.gridCount; idx++){\n                        this.centers[idx] = start + step*idx\n                    }\n                } break;\n            }\n        }\n    }\n\n    /// 重写创建逻辑\n    protected _updateHorizontal( idx: number, pos: number) {\n        let curCount = this._items.length\n        /// recycle all items\n        if( this._totalcount == 0) {\n            curCount > 0 && this._recycleAllItems( true)\n            return false\n        }\n        /// fill up & fill down\n        if( curCount == 0) {\n            let item = this._createLeftItem( idx, pos)\n            item.node.y = this.centers[0]\n            return item != null? true: false\n        }\n        /// fill left & fill right\n        let leftItem = this._items[0]\n        let rightItem = this._items[ curCount-1]\n        let right_right = this._getItemRight( rightItem)\n        if( curCount > 1) {\n            /// recycle left item\n            let canRecycleLeft = (rightItem.itemIdx !== (this._totalcount - 1) || right_right > this.rightBoundary)\n            if( canRecycleLeft && this._getItemRight( leftItem) < (this.leftBoundary - this._maxPadding)) {\n                this._items.splice( 0, 1)\n                this._recycle( leftItem)\n                return true\n            }\n            /// recycle right item\n            if( leftItem.itemIdx > 0 && this._getItemLeft(rightItem) > (this.rightBoundary + this._maxPadding)) {\n                this._items.splice( curCount-1, 1)\n                this._recycle( rightItem)\n                return true\n            }\n        }\n        /// create left item\n        if( this._getItemLeft( leftItem) > this.leftBoundary || (leftItem.itemIdx%this.gridCount) !== 0) {\n            let item = this._createNewItem( leftItem.itemIdx - 1)\n            if( item) {\n                let c = item.itemIdx % this.gridCount\n                item.node.x = c !== (this.gridCount-1)? leftItem.node.x: leftItem.node.x - item.node.width - item.padding \n                item.node.y = this.centers[c]\n                this._items.splice( 0, 0, item)\n                return true\n            }\n        }\n        /// create bottom item\n        if( right_right < this.rightBoundary || (rightItem.itemIdx%this.gridCount ) !== (this.gridCount-1)) {\n            let item = this._createNewItem( rightItem.itemIdx + 1)\n            if( item) {\n                let c = item.itemIdx % this.gridCount\n                item.node.x = c !== 0? rightItem.node.x: rightItem.node.x + rightItem.node.width + rightItem.padding\n                item.node.y = this.centers[c]\n                this._items.push( item)\n                return true\n            }\n        }\n        return false\n    }\n\n    protected _updateVertical( idx: number, pos: number) {\n        let curCount = this._items.length\n        /// recycle all items\n        if( this._totalcount == 0 ) {\n            curCount > 0 && this._recycleAllItems( true)\n            return false\n        }\n        /// fill up & fill down\n        if( curCount === 0) {\n            let realidx = Math.floor(idx/this.gridCount) // idx % this.gridCount\n            let item = this._createTopItem( realidx, pos)\n            item.node.x = this.centers[0]\n            return item != null\n        }\n        /// recycle top item 回收顶部数据 如果最底下的item 是最后一条那么不回收上面的item\n        let topitem = this._items[0]\n        let bottomitem = this._items[ curCount-1]\n        let bottom_bottom = this._getItemBottom( bottomitem)\n        if( curCount > 1) {\n            /// recycle top item\n            let canRecycleTop = (bottomitem.itemIdx !== this._totalcount-1 || bottom_bottom < this._bottomBoundary)\n            if( canRecycleTop && this._getItemBottom( topitem) > (this.topBoundary + this._maxPadding)) {\n                this._items.splice( 0, 1)\n                this._recycle( topitem)\n                return true\n            }\n            /// recycle bottom item topitem.itemIdx > 0 &&\n            // if( topitem.itemIdx > 0 && this._getItemTop( bottomitem) < (this.bottomBoundary - this._maxPadding)) {\n            if( this._getItemTop( bottomitem) < (this.bottomBoundary - this._maxPadding)) {\n                this._items.splice( curCount-1, 1)\n                this._recycle( bottomitem)\n                return true\n            }\n        }\n        /// create top items\n        if( this._getItemTop( topitem) < this.topBoundary || (topitem.itemIdx%this.gridCount) !== 0) {\n            let item = this._createNewItem( topitem.itemIdx - 1)\n            if( item) {\n                let c = item.itemIdx % this.gridCount\n                item.node.y = c !== (this.gridCount-1)? topitem.node.y: topitem.node.y + item.padding + item.node.height\n                item.node.x = this.centers[c]\n                this._items.splice( 0, 0, item)\n                return true\n            }\n        }\n        /// create bottom items\n        if( bottom_bottom > this.bottomBoundary || (bottomitem.itemIdx%this.gridCount ) !== (this.gridCount-1)) {\n            let item = this._createNewItem( bottomitem.itemIdx + 1)\n            if( item) {\n                let c = item.itemIdx % this.gridCount\n                item.node.y = c !== 0? bottomitem.node.y: bottomitem.node.y - bottomitem.node.height - bottomitem.padding\n                item.node.x = this.centers[c]\n                this._items.push( item)\n                return true\n            }\n        }\n        return false\n    }\n\n    _updateVerticalItems(){\n        // console.log(\"item size dirty\")\n        // if( this._items.length > 1) {\n        //     let pitem = this._items[0]\n        //     for( let idx=1; idx < this._items.length; idx++){\n        //         let item = this._items[idx]\n        //         item.node.y = pitem.node.y - pitem.node.height - item.padding\n        //         pitem = item\n        //     }\n        // }\n    }\n\n    _updateHorizontalItems(){\n        \n    }\n}"]}