{"version":3,"sources":["assets/looplist/LoopList.ts"],"names":[],"mappings":";;;;;AAAA,+CAA2C;AAE3C,IAAM,OAAO,GAAG,IAAI,CAAC;AAAA,CAAC,CAAA;AAEhB,IAAA,kBAA2D,EAA1D,oBAAO,EAAE,sBAAQ,EAAE,cAAI,EAAE,sCAAiC,CAAC;AAElE,IAAY,QAGX;AAHD,WAAY,QAAQ;IAChB,mDAAU,CAAA;IACV,+CAAQ,CAAA;AACZ,CAAC,EAHW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAGnB;AAKD;IAAsC,4BAAY;IAHlD;QAAA,qEAitBC;QA3sBG,cAAQ,GAAa,QAAQ,CAAC,QAAQ,CAAC;QAG/B,mBAAa,GAAW,GAAG,CAAA;QAG3B,oBAAc,GAAW,EAAE,CAAA;QAG3B,oBAAc,GAAW,EAAE,CAAA;QAEnC,YAAY;QACJ,eAAS,GAAoC,IAAI,CAAA;QACjD,gBAAU,GAAiC,EAAE,CAAA;QAC7C,eAAS,GAAW,IAAI,CAAA,CAAC,eAAe;QACxC,kBAAY,GAAiD,IAAI,CAAA;QACjE,iBAAW,GAAW,CAAC,CAAA;QAC/B,wBAAwB;QAChB,YAAM,GAAmB,EAAE,CAAA;QACnC,gDAAgD;QACxC,iBAAW,GAAW,CAAC,CAAA;QAE/B,uCAAuC;QAC/B,kBAAY,GAAW,CAAC,CAAA;QACxB,mBAAa,GAAW,CAAC,CAAA;QACzB,iBAAW,GAAW,CAAC,CAAA;QACvB,oBAAc,GAAW,CAAC,CAAA;QAClC,UAAU;QACF,mBAAa,GAAa,CAAC,CAAA;QAC3B,qBAAe,GAAW,CAAC,CAAA;QAC3B,oBAAc,GAAY,CAAC,CAAA;QAC3B,kBAAY,GAAc,CAAC,CAAA;QACnC,oBAAoB;QACZ,oBAAc,GAAY,IAAI,CAAA;QACtC,wBAAwB;QAChB,gBAAU,GAAY,KAAK,CAAA;QACnC,4BAA4B;QACpB,cAAQ,GAAW,CAAC,CAAA;QACpB,mBAAa,GAAY,KAAK,CAAA;QAEtC,MAAM;QAEE,gBAAU,GAAkB,IAAI,CAAA;;IAiqB5C,CAAC;IAhqBG,sBAAI,6BAAO;aAAX,cAAyB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAA,CAAA,CAAC;;;OAAA;IACxD,sBAAI,8BAAQ;aAAZ,cAAyB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAA,CAAA,CAAC;;;OAAA;IAEpD,yBAAM,GAAN;QACI,WAAW;QACX,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;YACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAE,EAAE,CAAC,UAAU,CAAC,CAAA;SACtD;QACD,qBAAqB;QACrB,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAA;QACjE,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAA;QAC7D,oBAAoB;QACpB,IAAI,CAAC,UAAU,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnF,IAAI,CAAC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACvE,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACzD,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,2BAA2B;YAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,GAAG,CAAC,CAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,GAAG,EAAE,CAAC,CAAC,CAAA;YACrE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAE,IAAI,CAAC,CAAA;YAClC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SAC1C;QACD,mBAAmB;QACnB,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAC7B,CAAC;IAED,2BAAQ,GAAR;QACI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;IACjE,CAAC;IAED,4BAAS,GAAT;QACI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;IAClE,CAAC;IAED,wCAAwC;IACxC,6BAAU,GAAV,UAAW,OAAoD,EAAE,KAAiB;QAAjB,sBAAA,EAAA,SAAiB;QAC9E,IAAI,CAAC,WAAW,GAAG,KAAK,IAAI,CAAC,CAAA;QAC7B,IAAI,CAAC,YAAY,GAAG,OAAO,CAAA;QAC3B,IAAI,CAAC,eAAe,EAAE,CAAA;QACtB,IAAI,CAAC,eAAe,EAAE,CAAA;IAC1B,CAAC;IAED,8BAA8B;IAC9B,kEAAkE;IAClE,+BAAY,GAAZ,UAAc,KAAa,EAAE,MAAuB;QAAvB,uBAAA,EAAA,cAAuB;QAChD,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAA;QAC/B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAA;QACxB,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,CAAA;YAC5B,IAAI,CAAC,eAAe,EAAE,CAAA;SACzB;aAAM;YACH,kDAAkD;YAClD,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA,CAAC,CAAC,IAAI,CAAA;YAC/E,IAAI,KAAK,IAAI,QAAQ,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,OAAO,GAAG,CAAC,KAAK,GAAE,CAAC,CAAC,CAAC,EAAE;gBAC1E,IAAI,CAAC,YAAY,EAAE,CAAA;aACtB;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAE,KAAK,GAAG,CAAC,CAAC,CAAA;aAC5B;SACJ;IACL,CAAC;IAED,cAAc;IACd,+BAAY,GAAZ;QACI,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAChD,IAAI,SAAS,GAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAChC,IAAI,GAAG,GAAW,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAA;YACzC,IAAI,OAAO,GAAO,SAAS,CAAC,OAAO,CAAA;YACnC,mBAAmB;YACnB,IAAI,CAAC,gBAAgB,EAAE,CAAA;YACvB,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAC5D,IAAI,CAAC,eAAe,CAAE,OAAO,EAAE,GAAG,CAAC,CAAA;SACtC;aAAM;YACH,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,CAAA;YAC5B,IAAI,CAAC,eAAe,EAAE,CAAA;SACzB;IACL,CAAC;IAED,2BAAQ,GAAR,UAAU,GAAW,EAAE,MAAuB;QAAvB,uBAAA,EAAA,cAAuB;QAC1C,6BAA6B;QAC7B,GAAG,GAAG,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;QACvD,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAA;YAChC,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;YACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC7B;aAAM;YACH,0BAA0B;YAC1B,QAAQ,IAAI,CAAC,QAAQ,EAAC;gBAClB,KAAK,QAAQ,CAAC,UAAU;oBACpB,IAAI,CAAC,YAAY,CAAE,GAAG,CAAC,CAAA;oBACvB,MAAK;gBACT,KAAK,QAAQ,CAAC,QAAQ;oBAClB,IAAI,CAAC,YAAY,CAAE,GAAG,CAAC,CAAA;oBACvB,MAAK;aACZ;SACJ;IACL,CAAC;IAED,aAAa;IACb,6BAAU,GAAV,UAAY,GAAkB;QAAlB,oBAAA,EAAA,UAAkB;QAC1B,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC,SAAS,CAAA;QAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QAC9B,IAAI,QAAQ,GAAiB,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,CAAC,CAAC,IAAI,CAAA;QACxE,IAAK,QAAQ,IAAI,IAAI,EAAE;YACnB,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;YACjC,IAAI,MAAM,IAAI,IAAI,EAAE;gBAChB,IAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAE,MAAM,CAAC,IAAI,CAAC,CAAA;gBACvC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAE,sBAAY,CAAC,CAAA;gBAC3C,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAA;aACzB;SACJ;QACD,OAAO,QAAQ,CAAA;IACnB,CAAC;IAED,kCAAe,GAAf;QACI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;IAC9B,CAAC;IAED,8BAAW,GAAX;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;IAC9B,CAAC;IAED,yBAAM,GAAN,UAAQ,EAAU;QACd,QAAQ;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAA,CAAC,CAAC,KAAK,CAAA,CAAC,CAAC,IAAI,CAAC,aAAa,CAAA;QAC/D,QAAQ,IAAI,CAAC,QAAQ,EAAC;YAClB,KAAK,QAAQ,CAAC,UAAU;gBACpB,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAA,CAAC,yBAAyB;gBAC9E,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC,sBAAsB;gBAClF,MAAK;YACT,KAAK,QAAQ,CAAC,QAAQ;gBAClB,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAA;gBAClD,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAC3D,MAAK;SACZ;QACD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAA;QAC3B,0BAA0B;QAC1B,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;YACvB,IAAI,CAAC,eAAe,EAAE,CAAA;SACzB;IACL,CAAC;IAEO,kCAAe,GAAvB;QAAA,iBAaC;QAZG,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YACxB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAA;YACnB,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAE,sBAAY,CAAC,CAAA;YACjE,OAAO,CAAC,OAAO,CAAE,UAAA,IAAI;gBACjB,mBAAmB;gBACnB,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAA;gBACvC,KAAI,CAAC,SAAS,GAAY,KAAI,CAAC,SAAS,IAAI,IAAI,CAAA,CAAC,CAAC,GAAG,CAAA,CAAC,CAAC,KAAI,CAAC,SAAS,CAAA;gBACrE,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAM,IAAI,CAAA;gBAC9B,KAAI,CAAC,WAAW,GAAU,IAAI,CAAC,GAAG,CAAE,KAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,CAAA;gBACrE,KAAI,CAAC,QAAQ,CAAE,IAAI,CAAC,CAAA;YACxB,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IAEO,qCAAkB,GAA1B,UAA4B,GAAY;QACpC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAA;QAChC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACzB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,GAAG,GAAG,CAAA;SACzC;IACL,CAAC;IAEO,+BAAY,GAApB,UAAsB,GAAW;QAC7B,+BAA+B;QAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,GAAG,CAAC,CAAA;YACjC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAE,CAAC,CAAC,CAAA;YAC7C,IAAI,KAAK,IAAG,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,WAAW,CAAE,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY;gBACzC,IAAI,CAAC,cAAc,CAAE,IAAI,CAAC,IAAI,IAAI,CAAC,eAAe,EAAC;gBAC3D,OAAM;aACT;SACJ;QACD,uCAAuC;QACvC,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,CAAA;QAC5B,IAAI,IAAI,CAAC,eAAe,CAAE,GAAG,CAAC,EAAC;YAC3B,wBAAwB;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAE,CAAC,CAAC,CAAA;YAC9C,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAC;gBACxC,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAE,IAAI,CAAC,CAAA;gBACvC,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE;oBAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,MAAM,CAAA;oBAC9C,uBAAuB;oBACvB,0BAA0B;oBAC1B,IAAI,IAAI,CAAC,eAAe,EAAE,EAAC;wBACvB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;wBAC1B,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC,EAAE;4BACrB,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAE,KAAK,CAAC,CAAA;4BAClC,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE;gCACzB,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,CAAA;6BAC9D;yBACJ;qBACJ;oBACD,mBAAmB;oBACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;iBACzB;aACJ;SACJ;IACL,CAAC;IAEO,+BAAY,GAApB,UAAsB,GAAW;QAC7B,+BAA+B;QAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,GAAG,CAAC,CAAA;YACjC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAE,CAAC,CAAC,CAAA;YAC7C,IAAI,KAAK,IAAG,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,YAAY,CAAE,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa;gBAC3C,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,EAAC;gBACzD,OAAM;aACT;SACJ;QACD,uCAAuC;QACvC,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,CAAA;QAC5B,IAAI,IAAI,CAAC,eAAe,CAAE,GAAG,CAAC,EAAE;YAC5B,wBAAwB;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAE,CAAC,CAAC,CAAA;YAC9C,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAC;gBACxC,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,CAAA;gBACrC,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE;oBAC7B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,KAAK,CAAA;oBAC5C,4BAA4B;oBAC5B,IAAI,IAAI,CAAC,eAAe,EAAE,EAAC;wBACvB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;wBAC1B,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC,EAAE;4BACrB,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAE,KAAK,CAAC,CAAA;4BACpC,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE;gCAC3B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,CAAA;6BAChE;yBACJ;qBACJ;oBACD,mBAAmB;oBACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;iBACzB;aACJ;SACJ;IACL,CAAC;IAEO,mCAAgB,GAAxB,UAA0B,GAAW;QACjC,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAE,GAAG,CAAC,CAAA;QAChC,IAAI,MAAM,GAAG,CAAC,CAAA;QACd,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,GAAG,CAAA,CAAC,CAAC,IAAI,CAAC,cAAc,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAA;SACnF;aAAM;YACH,MAAM,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,CAAA;YACtD,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;gBAChC,MAAM,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,CAAA;gBACxD,MAAM,GAAG,MAAM,IAAI,CAAC,CAAA,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,MAAM,CAAA;aAClC;iBAAM;gBACH,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;gBAC/C,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;oBACvC,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,EAAG;oBACnD,MAAM,GAAG,CAAC,CAAA;iBACb;aACJ;SACJ;QACD,UAAU;QACV,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAE,MAAM,CAAC,GAAG,OAAO,CAAA;QAChD,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE;YAC/D,MAAM,GAAG,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG,CAAE,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,CAAA;SACnF;aAAM;YACH,aAAa;SAChB;QACD,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;YACtB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAE,EAAE,CAAC,EAAE,CAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;SACzD;aAAM;YACH,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAA;SACnC;IACL,CAAC;IAEO,mCAAgB,GAAxB,UAA0B,GAAW;QACjC,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAE,GAAG,CAAC,CAAA;QAChC,IAAI,MAAM,GAAG,CAAC,CAAA;QACd,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,GAAG,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAA,CAAC,CAAC,IAAI,CAAC,cAAc,CAAA;SACnF;aAAM;YACH,MAAM,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,CAAA;YACpD,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;gBAChC,MAAM,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAE,IAAI,CAAC,CAAA;gBAC1D,MAAM,GAAG,MAAM,IAAI,CAAC,CAAA,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,MAAM,CAAA;aAClC;iBAAM;gBACH,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;gBAC/C,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;oBACvC,IAAI,CAAC,cAAc,CAAE,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,EAAG;oBACpD,MAAM,GAAG,CAAC,CAAA;iBACb;aACJ;SACJ;QACD,UAAU;QACV,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAE,MAAM,CAAC,GAAG,OAAO,CAAA;QAChD,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE;YAC/D,MAAM,GAAG,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG,CAAE,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,CAAA;SACnF;aAAM;YACH,aAAa;SAChB;QACD,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;YACtB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAE,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;SACzD;aAAM;YACH,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAA;SACnC;IACL,CAAC;IAEO,2BAAQ,GAAhB,UAAiB,IAAkB;QAC/B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACvC,IAAI,IAAI,IAAI,IAAI,EAAE;YAAE,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA;SAAE;QAC9D,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;QACpB,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,CAAA;IACpB,CAAC;IAEO,mCAAgB,GAAxB,UAA0B,KAAqB;QAA/C,iBAOC;QAPyB,sBAAA,EAAA,aAAqB;QAC3C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE,UAAA,IAAI;YACrB,KAAI,CAAC,QAAQ,CAAE,IAAI,CAAC,CAAA;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;QAChB,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAA;QAChC,KAAK,IAAI,IAAI,CAAC,kBAAkB,CAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACnD,CAAC;IAEO,iCAAc,GAAtB,UAAwB,GAAW;QAC/B,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,CAAA;QACnD,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAA,CAAC,CAAC,IAAI,CAAC,YAAY,CAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;QAClE,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;YAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACtD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAA;SAClC;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAEO,6BAAU,GAAlB,UAAoB,GAAW;QAC3B,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACzB,IAAI,IAAI,CAAC,OAAO,IAAI,GAAG,EAAE;gBACrB,OAAO,IAAI,CAAA;aACd;SACJ;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAEO,8BAAW,GAAnB,UAAqB,IAAkB;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;IACvC,CAAC;IAEO,iCAAc,GAAtB,UAAwB,IAAkB;QACtC,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,CAAA;QACrC,OAAO,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAA;IACrC,CAAC;IAEO,+BAAY,GAApB,UAAsB,IAAkB;QACpC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA,CAAC,gBAAgB;IACxD,CAAC;IAEO,gCAAa,GAArB,UAAuB,IAAkB;QACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,CAAA;QACvC,OAAO,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAA;IACrC,CAAC;IAEO,kCAAe,GAAvB,UAAyB,GAAe,EAAE,GAAkB;QAAnC,oBAAA,EAAA,OAAe;QAAE,oBAAA,EAAA,UAAkB;QACxD,aAAa;QACb,IAAI,UAAU,GAAG,CAAC,CAAA;QAClB,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,UAAU,CAAA,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAA,CAAC,CAAC,IAAI,CAAC,eAAe,CAAA;QAChG,OAAO,MAAM,CAAC,IAAI,CAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;YACjC,IAAI,EAAE,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE;gBACrC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;aACzB;SACJ;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAEO,iCAAc,GAAtB,UAAwB,GAAW,EAAE,CAAgB;QAAhB,kBAAA,EAAA,QAAgB;QACjD,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAE,GAAG,CAAC,CAAA;QACpC,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,IAAI,IAAI,EAAE;gBACX,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAA;aAC3E;iBAAM;gBACH,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;aAClB;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,CAAA;SAC1B;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAED,aAAa;IACL,uCAAoB,GAA5B;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAC1B,KAAK,IAAI,GAAG,GAAC,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,EAAC;gBAC5C,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAA;gBAC7D,KAAK,GAAG,IAAI,CAAA;aACf;SACJ;IACL,CAAC;IAEO,kCAAe,GAAvB,UAAyB,GAAW,EAAE,GAAW;QAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;QACjC,qBAAqB;QACrB,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE;YACvC,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,CAAA;YAC5B,OAAO,KAAK,CAAA;SACf;QACD,uBAAuB;QACvB,IAAI,QAAQ,KAAK,CAAC,EAAE;YAChB,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAE,GAAG,EAAE,GAAG,CAAC,CAAA;YACzC,OAAO,IAAI,IAAI,IAAI,CAAA;SACtB;QACD,wDAAwD;QACxD,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAE,QAAQ,GAAC,CAAC,CAAC,CAAA;QACzC,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAE,UAAU,CAAC,CAAA;QACpD,IAAI,QAAQ,GAAG,CAAC,EAAE;YACd,oBAAoB;YACpB,IAAI,aAAa,GAAG,CAAC,UAAU,CAAC,OAAO,KAAK,IAAI,CAAC,WAAW,GAAC,CAAC,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,CAAA;YACvG,IAAI,aAAa,IAAI,IAAI,CAAC,cAAc,CAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE;gBACxF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,CAAC,CAAA;gBACzB,IAAI,CAAC,QAAQ,CAAE,OAAO,CAAC,CAAA;gBACvB,OAAO,IAAI,CAAA;aACd;YACD,uBAAuB;YACvB,IAAI,OAAO,CAAC,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAE,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE;gBACjG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAE,QAAQ,GAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAClC,IAAI,CAAC,QAAQ,CAAE,UAAU,CAAC,CAAA;gBAC1B,OAAO,IAAI,CAAA;aACd;SACJ;QACD,mBAAmB;QACnB,IAAI,IAAI,CAAC,WAAW,CAAE,OAAO,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE;YAC/C,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAE,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC,CAAA;YACpD,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAA;gBAC9D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA;gBAC/B,OAAO,IAAI,CAAA;aACd;SACJ;QACD,sBAAsB;QACtB,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,EAAE;YACrC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAE,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC,CAAA;YACvD,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,OAAO,CAAA;gBAC7E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,CAAA;gBACvB,OAAO,IAAI,CAAA;aACd;SACJ;QACD,OAAO,KAAK,CAAA;IAChB,CAAC;IAEO,kCAAe,GAAvB,UAAyB,GAAW,EAAE,CAAe;QAAf,kBAAA,EAAA,QAAe;QACjD,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAE,GAAG,CAAC,CAAA;QACpC,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,IAAI,IAAI,EAAE;gBACX,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAA;aAC7E;iBAAM;gBACH,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;aAClB;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,CAAA;SAC1B;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAEO,yCAAsB,GAA9B;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAC5B,KAAK,IAAI,GAAG,GAAC,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,EAAC;gBAC5C,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAA;gBACjE,OAAO,GAAG,IAAI,CAAA;aACjB;SACJ;IACL,CAAC;IAEO,oCAAiB,GAAzB,UAA2B,GAAW,EAAE,GAAW;QAC/C,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;QACjC,qBAAqB;QACrB,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE;YACvC,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,CAAA;YAC5B,OAAO,KAAK,CAAA;SACf;QACD,uBAAuB;QACvB,IAAI,QAAQ,IAAI,CAAC,EAAE;YACf,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,CAAE,GAAG,EAAE,GAAG,CAAC,CAAA;YAC1C,OAAO,IAAI,IAAI,IAAI,CAAA,CAAC,CAAC,IAAI,CAAA,CAAC,CAAC,KAAK,CAAA;SACnC;QACD,0BAA0B;QAC1B,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QAC7B,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAE,QAAQ,GAAC,CAAC,CAAC,CAAA;QACxC,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAE,SAAS,CAAC,CAAA;QAChD,IAAI,QAAQ,GAAG,CAAC,EAAE;YACd,qBAAqB;YACrB,IAAI,cAAc,GAAG,CAAC,SAAS,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,CAAA;YACvG,IAAI,cAAc,IAAI,IAAI,CAAC,aAAa,CAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE;gBAC1F,IAAI,CAAC,MAAM,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,CAAC,CAAA;gBACzB,IAAI,CAAC,QAAQ,CAAE,QAAQ,CAAC,CAAA;gBACxB,OAAO,IAAI,CAAA;aACd;YACD,sBAAsB;YACtB,IAAI,QAAQ,CAAC,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE;gBAChG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAE,QAAQ,GAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAClC,IAAI,CAAC,QAAQ,CAAE,SAAS,CAAC,CAAA;gBACzB,OAAO,IAAI,CAAA;aACd;SACJ;QACD,oBAAoB;QACpB,IAAI,IAAI,CAAC,YAAY,CAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE;YAClD,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAE,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC,CAAA;YACrD,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAA;gBAC9D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA;gBAC/B,OAAO,IAAI,CAAA;aACd;SACJ;QACD,sBAAsB;QACtB,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,EAAE;YAClC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAE,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,CAAA;YACtD,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,OAAO,CAAA;gBACzE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,CAAA;gBACvB,OAAO,IAAI,CAAA;aACd;SACJ;IACL,CAAC;IAED,kCAAkC;IAClC,qCAAkB,GAAlB;QACI,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,cAAc,CAAE,EAAE,CAAC,IAAI,CAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;YACjF,aAAa;YACb,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;YAC9C,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YACrD,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YACtD,cAAc;YACd,IAAI,CAAC,aAAa,GAAI,CAAC,OAAO,CAAC;YAC/B,IAAI,CAAC,eAAe,GAAG,CAAC,OAAO,CAAC;YAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;YAC1D,IAAI,CAAC,YAAY,GAAK,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC7D,mBAAmB;YACnB,IAAI,CAAC,YAAY,GAAK,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAA;YAC7D,IAAI,CAAC,aAAa,GAAI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAA;YAC9D,IAAI,CAAC,WAAW,GAAM,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAA;YAC5D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAA;YAE/D,qEAAqE;SACxE;IACL,CAAC;IAED,SAAS;IACT,8BAAW,GAAX,UAAa,KAAc;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAA,CAAC,CAAC,KAAK,CAAA,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;IACvD,CAAC;IAED,iBAAiB;IACjB,8EAA8E;IAC9E,0CAAuB,GAAvB;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACzB,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAA;aAChD;SACJ;QACD,OAAO,IAAI,CAAC,aAAa,CAAA;IAC7B,CAAC;IAED,gBAAgB;IAChB,2CAAwB,GAAxB;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;YAC5C,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAE,CAAC,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,CAAA;aACnC;SACJ;QACD,OAAO,IAAI,CAAC,cAAc,CAAA;IAC9B,CAAC;IAED,gBAAgB;IAChB,8EAA8E;IAC9E,yCAAsB,GAAtB;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACzB,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAA;aAC/C;SACJ;QACD,OAAO,IAAI,CAAC,YAAY,CAAA;IAC5B,CAAC;IAED,gBAAgB;IAChB,4CAAyB,GAAzB;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;YAC5C,IAAK,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAC,cAAc,CAAE,IAAI,CAAC,CAAA;aACpC;SACJ;QACD,OAAO,IAAI,CAAC,eAAe,CAAA;IAC/B,CAAC;IAED,cAAc;IACd,2CAAwB,GAAxB,UAA0B,QAAiB;QACvC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC,eAAe;QACf,IAAI,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;YAC/E,OAAO,IAAI,CAAC,oBAAoB,CAAC;SACpC;QACD,IAAI,mBAAmB,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,QAAQ,IAAI,CAAC,QAAQ,EAAE;YACnB,KAAK,QAAQ,CAAC,UAAU,CAAC,CAAC;gBACtB,YAAY;gBACZ,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAA;gBACzB,IAAI,IAAI,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAA;gBACtD,IAAI,KAAK,GAAG,IAAI,CAAC,wBAAwB,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAA;gBACxD,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE;oBAC3B,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;iBACpD;qBAAM,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE;oBACpC,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBACpD,IAAI,IAAI,GAAG,IAAI,GAAG,mBAAmB,CAAC,CAAC,CAAA;oBACvC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE;wBACtF,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;qBACpD;iBACJ;gBACD,MAAK;aACR;YACD,KAAK,QAAQ,CAAC,QAAQ,CAAC,CAAA;gBACnB,aAAa;gBACb,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAA;gBACzB,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAA;gBACpD,IAAI,MAAM,GAAG,IAAI,CAAC,yBAAyB,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAA;gBAC1D,IAAK,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC1B,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,GAAG,GAAG,CAAA;iBAClD;qBAAM,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE;oBACtC,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;oBACtD,4CAA4C;oBAC5C,IAAI,IAAI,GAAG,GAAG,GAAG,mBAAmB,CAAC,CAAC,CAAA;oBACtC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE;wBACrF,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,GAAG,GAAG,CAAA;qBAClD;iBACJ;gBACD,MAAK;aACR;SACJ;QACD,OAAO;QACP,IAAI,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE;YAC5C,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;YAChD,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;SAC1C;QACD,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QAC5D,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAGD,sBAAI,0CAAoB;QADxB,sBAAsB;aACtB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAA;QAC/C,CAAC;aAED,UAAyB,KAAc;YACnC,IAAI,CAAC,UAAU,CAAC,oBAAoB,GAAG,KAAK,CAAA;QAChD,CAAC;;;OAJA;IAMD,sBAAI,+CAAyB;aAA7B;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAA;QACpD,CAAC;aAED,UAA+B,KAAc;YACzC,IAAI,CAAC,UAAU,CAAC,yBAAyB,GAAG,KAAK,CAAA;QACrD,CAAC;;;OAJA;IAMD,sBAAI,gCAAU;aAAd;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA;QACrC,CAAC;;;OAAA;IA1sBD;QADC,QAAQ,CAAE,EAAC,IAAI,EAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,IAAI,EAAC,CAAC;8CACjB;IAGvC;QADC,QAAQ,CAAE,EAAE,CAAC,KAAK,CAAC;mDACe;IAGnC;QADC,QAAQ,CAAE,EAAE,CAAC,OAAO,CAAC;oDACa;IAGnC;QADC,QAAQ,CAAE,EAAE,CAAC,KAAK,CAAC;oDACe;IAiCnC;QADC,QAAQ,CAAE,EAAE,CAAC,UAAU,CAAC;gDACe;IA7CvB,QAAQ;QAH5B,OAAO;QACP,gBAAgB,EAAE;QAClB,IAAI,CAAC,sBAAsB,CAAC;OACR,QAAQ,CA8sB5B;IAAD,eAAC;CA9sBD,AA8sBC,CA9sBqC,EAAE,CAAC,SAAS,GA8sBjD;kBA9sBoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["import LoopListItem  from \"./LoopListItem\";\r\n\r\nconst EPSILON = 1e-4;1\r\n\r\nconst {ccclass, property, menu, disallowMultiple} = cc._decorator;\r\n\r\nexport enum Movement{\r\n    Horizontal,\r\n    Vertical,\r\n}\r\n\r\n@ccclass\r\n@disallowMultiple()\r\n@menu(\"UIExtension/LoopList\")\r\nexport default class LoopList extends cc.Component {\r\n\r\n    @property( {type:cc.Enum(Movement), serializable: true})\r\n    movement: Movement = Movement.Vertical;\r\n    \r\n    @property( cc.Float)\r\n    private cacheBoundary: number = 200\r\n\r\n    @property( cc.Integer)\r\n    private frameCreateMax: number = 30\r\n\r\n    @property( cc.Float)\r\n    private scrollSpeedMax: number = 10\r\n\r\n    /// item 缓存池\r\n    private _itemPool: { [key:string]: LoopListItem[]} = null\r\n    private _templates: {[key:string]: LoopListItem} = {}\r\n    private _template: string = null /// 默认使用的prefab\r\n    private _itemCreator: ( view: LoopList, idx: number)=>LoopListItem = null\r\n    private _totalcount: number = 0\r\n    /// current display item\r\n    private _items: LoopListItem[] = []\r\n    /// max padding 区分回收边界和创建边界 避免padding 造成的重复创建和回收\r\n    private _maxPadding: number = 0\r\n\r\n    /// 缓存边界 recycle & create item boundary\r\n    private leftBoundary: number = 0\r\n    private rightBoundary: number = 0\r\n    private topBoundary: number = 0\r\n    private bottomBoundary: number = 0\r\n    /// 上下左右边界\r\n    private _leftBoundary: number   = 0\r\n    private _bottomBoundary: number = 0 \r\n    private _rightBoundary: number  = 0\r\n    private _topBoundary: number    = 0\r\n    /// 标记item size 是否变化\r\n    private _itemSizeDirty: boolean = true\r\n    /// 标记item 是否需要更新（创建或回收）\r\n    private _itemDirty: boolean = false\r\n    /// 滑动移动时用到的控制变量 展示item 到idx\r\n    private animeIdx: number = 0\r\n    private bAnimeMoveing: boolean = false\r\n\r\n    /// 视口\r\n    @property( cc.ScrollView)\r\n    private scrollView: cc.ScrollView = null\r\n    get content(): cc.Node { return this.scrollView.content}\r\n    get viewPort():cc.Node { return this.content.parent}\r\n\r\n    onLoad(){\r\n        /// 只允许一个方向\r\n        if( this.scrollView == null) {\r\n            this.scrollView = this.getComponent( cc.ScrollView)\r\n        }\r\n        /// 重置scrollview 滚动属性\r\n        this.scrollView.horizontal = this.movement == Movement.Horizontal\r\n        this.scrollView.vertical = this.movement == Movement.Vertical\r\n        /// 重定向scrollview 函数\r\n        this.scrollView._getHowMuchOutOfBoundary = this._getHowMuchOutOfBoundary.bind(this)\r\n        this.scrollView._calculateBoundary = this._calculateBoundary.bind(this)\r\n        this.scrollView._clampDelta = this._clampDelta.bind(this)\r\n        if( this.content) {\r\n            /// initialize content view\r\n            let anch = this.scrollView.horizontal? cc.v2( 0, 0.5): cc.v2( 0.5, 1)\r\n            this.content.setAnchorPoint( anch) \r\n            this.content.setPosition( cc.Vec2.ZERO)\r\n        }\r\n        /// initialize data\r\n        this._calculateBoundary()\r\n    }\r\n\r\n    onEnable(){\r\n        this.scrollView.node.on( \"scrolling\", this.onScrolling, this)\r\n    }\r\n\r\n    onDisable(){\r\n        this.scrollView.node.off( \"scrolling\", this.onScrolling, this)\r\n    }\r\n\r\n    /// initialize total count, item creator\r\n    initialize(creator:( view: LoopList, idx: number)=>LoopListItem, count: number = 0){\r\n        this._totalcount = count || 0\r\n        this._itemCreator = creator\r\n        this._initializePool()\r\n        this._updateListView() \r\n    }\r\n\r\n    /// 设置当前item count 如果不是强制Reset\r\n    /// 那么大于等于当前itemcout || 最后一项item不是 当前item 自动使用刷新方式不会修改当前item 的显示位置\r\n    setItemCount( count: number, bReset: boolean = false) {\r\n        let oldcount = this._totalcount\r\n        this._totalcount = count\r\n        if( bReset) { \r\n            this._recycleAllItems( true)\r\n            this._updateListView()\r\n        } else {\r\n            /// 如果新的item count 大于 oldItemcount那么大于等于当前itemcout\r\n            let lastItem = this._items.length > 0? this._items[ this._items.length-1]: null\r\n            if( count >= oldcount || (lastItem != null && lastItem.itemIdx < (count -1))) {\r\n                this.refreshItems()\r\n            } else {\r\n                this.showItem( count - 1)\r\n            }\r\n        }\r\n    }\r\n     \r\n    /// 刷新当前所有item\r\n    refreshItems() {\r\n        if( this._totalcount > 0 && this._items.length > 0) {\r\n            let fristItem   = this._items[0]\r\n            let pos         = fristItem.node.position\r\n            let itemIdx     = fristItem.itemIdx\r\n            /// create top item\r\n            this._recycleAllItems()\r\n            let arg = this.movement == Movement.Horizontal? pos.x: pos.y\r\n            this._updateListView( itemIdx, arg)\r\n        } else {\r\n            this._recycleAllItems( true)\r\n            this._updateListView()\r\n        }\r\n    }\r\n\r\n    showItem( idx: number, bAnime: boolean = false) {\r\n        // 限定到 0 - （totalcount -1）范围内\r\n        idx = Math.min( this._totalcount - 1, Math.max(0, idx)) \r\n        if( bAnime) {\r\n            this.scrollView.stopAutoScroll()\r\n            this.animeIdx = idx;\r\n            this.bAnimeMoveing = true;\r\n        } else {\r\n            /// 回收所有items 从新创建top item\r\n            switch( this.movement){\r\n                case Movement.Horizontal:\r\n                    this._showItemHor( idx)\r\n                    break\r\n                case Movement.Vertical:\r\n                    this._showItemVer( idx)\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n    /// 获取一个item \r\n    getNewItem( key: string = null): LoopListItem {\r\n        key = key || this._template\r\n        let pool = this._itemPool[key]\r\n        let instance: LoopListItem = (pool && pool.length > 0)? pool.pop(): null\r\n        if ( instance == null) {\r\n            let prefab = this._templates[key]\r\n            if( prefab != null) { \r\n                let node = cc.instantiate( prefab.node) \r\n                instance = node.getComponent( LoopListItem)\r\n                instance.itemKey = key\r\n            }\r\n        }\r\n        return instance\r\n    }\r\n\r\n    itemSizeChanged() {\r\n        this._itemSizeDirty = true\r\n    }\r\n\r\n    onScrolling() {\r\n        this._itemDirty = true\r\n        this.bAnimeMoveing = false\r\n    }\r\n\r\n    update( dt: number) {\r\n        /// 动画移动\r\n        this.bAnimeMoveing = this._scrolling? false: this.bAnimeMoveing\r\n        switch( this.movement){\r\n            case Movement.Horizontal:\r\n                this._itemSizeDirty && this._updateHorizontalItems() /// check item size dirty\r\n                this.bAnimeMoveing && this._scrollToItemHor( this.animeIdx) /// check auto moveing\r\n                break\r\n            case Movement.Vertical:\r\n                this._itemSizeDirty && this._updateVerticalItems()\r\n                this.bAnimeMoveing && this._scrollToItemVer( this.animeIdx)\r\n                break\r\n        }\r\n        this._itemSizeDirty = false\r\n        /// create || recycle item\r\n        if( this._itemDirty) {\r\n            this._itemDirty = false\r\n            this._updateListView()\r\n        }\r\n    }\r\n\r\n    private _initializePool() {\r\n        if( this._itemPool == null) {\r\n            this._itemPool = {}\r\n            let prefabs = this.content.getComponentsInChildren( LoopListItem)\r\n            prefabs.forEach( item=>{\r\n                /// save templates \r\n                let key = item.itemKey = item.node.name\r\n                this._template          = this._template == null? key: this._template\r\n                this._templates[key]    = item\r\n                this._maxPadding        = Math.max( this._maxPadding, item.padding+2)\r\n                this._recycle( item)\r\n            })\r\n        }\r\n    }\r\n\r\n    private setContentPosition( pos: cc.Vec2){\r\n        this.scrollView.stopAutoScroll()\r\n        if( this.scrollView.content) {\r\n            this.scrollView.content.position = pos\r\n        }\r\n    }\r\n\r\n    private _showItemVer( idx: number) {\r\n        /// 判断需要现实的item和最后一个都在窗口内就不用执行了\r\n        if( this._items.length > 0) {\r\n            let frist = this._getItemAt( idx)\r\n            let last = this._items[this._items.length -1]\r\n            if( frist!= null && last.itemIdx === (this._totalcount-1) &&\r\n                    this._getItemTop( frist) <= this._topBoundary &&\r\n                        this._getItemBottom( last) >= this._bottomBoundary){\r\n                return\r\n            }\r\n        }\r\n        /// 回收当前所有item & reset content position\r\n        this._recycleAllItems( true)\r\n        if( this._updateListView( idx)){\r\n            /// 判断最后一条是否在窗口内部需要靠窗口底部\r\n            let item = this._items[ this._items.length -1]\r\n            if( item.itemIdx === (this._totalcount - 1)){\r\n                let bottom = this._getItemBottom( item)\r\n                if( bottom > this._bottomBoundary) {\r\n                    this.content.y = this._bottomBoundary - bottom\r\n                    /// 移动窗口后需要重新加载顶部item &\r\n                    /// 判断 topitem 是否在顶部边界里面去了\r\n                    if( this._updateListView()){\r\n                        let titem = this._items[0]\r\n                        if( titem.itemIdx === 0) {\r\n                            let top = this._getItemTop( titem)\r\n                            if( top < this._topBoundary) {\r\n                                this.content.y = this.content.y + (this._topBoundary - top)\r\n                            }\r\n                        }\r\n                    }\r\n                    /// 标记item 需要重新创建回收\r\n                    this._itemDirty = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _showItemHor( idx: number){\r\n        /// 判断需要显示的item和最后一个都在窗口内就不用执行了\r\n        if( this._items.length > 0) {\r\n            let frist = this._getItemAt( idx)\r\n            let last = this._items[this._items.length -1]\r\n            if( frist!= null && last.itemIdx === (this._totalcount-1) &&\r\n                    this._getItemLeft( frist) >= this._leftBoundary &&\r\n                        this._getItemRight( last) <= this._rightBoundary){\r\n                return\r\n            }\r\n        }\r\n        /// 回收当前所有item & reset content position\r\n        this._recycleAllItems( true)\r\n        if( this._updateListView( idx)) {\r\n            /// 判断最后一条是否在窗口内部需要靠窗口右边\r\n            let item = this._items[ this._items.length -1]\r\n            if( item.itemIdx === (this._totalcount - 1)){\r\n                let right = this._getItemRight( item)\r\n                if( right < this._rightBoundary) {\r\n                    this.content.x = this._rightBoundary - right\r\n                    /// 判断 leftitem 是否在左边界边界里面去了\r\n                    if( this._updateListView()){\r\n                        let titem = this._items[0]\r\n                        if( titem.itemIdx === 0) {\r\n                            let left = this._getItemLeft( titem)\r\n                            if( left > this._leftBoundary) {\r\n                                this.content.x = this.content.x - (left - this._leftBoundary)\r\n                            }\r\n                        }\r\n                    }\r\n                    /// 标记item 需要重新创建回收\r\n                    this._itemDirty = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollToItemHor( idx: number) {\r\n        let item = this._getItemAt( idx)\r\n        let offset = 0\r\n        if( item == null) {\r\n            offset = this._items[0].itemIdx > idx? this.scrollSpeedMax: -this.scrollSpeedMax\r\n        } else {\r\n            offset = this._leftBoundary - this._getItemLeft( item)\r\n            if( idx === (this._totalcount - 1)) {\r\n                offset = this._rightBoundary - this._getItemRight( item)\r\n                offset = offset >= 0? 0: offset\r\n            } else {\r\n                let last = this._items[ this._items.length - 1]\r\n                if( last.itemIdx === (this._totalcount - 1) && \r\n                    this._getItemRight( last) <= this._rightBoundary)  {\r\n                    offset = 0\r\n                }\r\n            }\r\n        }\r\n        /// 判断是否为0\r\n        this.bAnimeMoveing = Math.abs( offset) > EPSILON\r\n        if( offset > this.scrollSpeedMax || offset < -this.scrollSpeedMax) {\r\n            offset = Math.min( this.scrollSpeedMax, Math.max( -this.scrollSpeedMax, offset))\r\n        } else {\r\n            /// 做个线性插值更平滑\r\n        }\r\n        if( offset !== 0) {\r\n            this._itemDirty = true\r\n            this.scrollView._moveContent( cc.v2( offset, 0), true)\r\n        } else {\r\n            this.scrollView.stopAutoScroll()\r\n        }\r\n    }\r\n\r\n    private _scrollToItemVer( idx: number){\r\n        let item = this._getItemAt( idx)\r\n        let offset = 0\r\n        if( item == null) {\r\n            offset = this._items[0].itemIdx > idx? -this.scrollSpeedMax: this.scrollSpeedMax\r\n        } else {\r\n            offset = this._topBoundary - this._getItemTop( item)\r\n            if( idx === (this._totalcount - 1)) {\r\n                offset = this._bottomBoundary - this._getItemBottom( item) \r\n                offset = offset <= 0? 0: offset\r\n            } else {\r\n                let last = this._items[ this._items.length - 1]\r\n                if( last.itemIdx === (this._totalcount - 1) && \r\n                    this._getItemBottom( last) <= this._rightBoundary)  {\r\n                    offset = 0\r\n                } \r\n            }\r\n        }\r\n        /// 判断是否为0\r\n        this.bAnimeMoveing = Math.abs( offset) > EPSILON\r\n        if( offset > this.scrollSpeedMax || offset < -this.scrollSpeedMax) {\r\n            offset = Math.min( this.scrollSpeedMax, Math.max( -this.scrollSpeedMax, offset))\r\n        } else {\r\n            /// 做个线性插值更平滑\r\n        }\r\n        if( offset !== 0) {\r\n            this._itemDirty = true\r\n            this.scrollView._moveContent( cc.v2( 0, offset), true)\r\n        } else {\r\n            this.scrollView.stopAutoScroll()\r\n        }\r\n    }\r\n\r\n    private _recycle(item: LoopListItem) {\r\n        let pool = this._itemPool[item.itemKey]\r\n        if( pool == null) { pool = this._itemPool[item.itemKey] = [] }\r\n        item.node.active = false\r\n        item.looplist = null\r\n        pool.push( item)\r\n    }\r\n    \r\n    private _recycleAllItems( reset:boolean = false){\r\n        this._items.forEach( item => {\r\n            this._recycle( item)\r\n        });\r\n        this._items = []\r\n        this.scrollView.stopAutoScroll()\r\n        reset && this.setContentPosition( cc.Vec2.ZERO)\r\n    }\r\n\r\n    private _createNewItem( idx: number): LoopListItem {\r\n        if( idx < 0 || idx >= this._totalcount) return null \r\n        let item = this._itemCreator? this._itemCreator( this, idx) : null\r\n        if( item != null) {\r\n            item.node.position = cc.Vec2.ZERO; item.itemIdx = idx; \r\n            item.node.active = true;\r\n            item.looplist = this; \r\n            item.node.parent = this.content\r\n        }\r\n        return item\r\n    }\r\n\r\n    private _getItemAt( idx: number): LoopListItem{\r\n        for( let i=0; i<this._items.length; i++) {\r\n            let item = this._items[i] \r\n            if( item.itemIdx == idx) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    private _getItemTop( item: LoopListItem): number {\r\n        return item.node.y + this.content.y\r\n    }\r\n\r\n    private _getItemBottom( item: LoopListItem): number {\r\n        let itemtop = this._getItemTop( item)\r\n        return itemtop - item.node.height \r\n    }\r\n\r\n    private _getItemLeft( item: LoopListItem): number {\r\n        return item.node.x + this.content.x // + item.offset\r\n    }\r\n\r\n    private _getItemRight( item: LoopListItem): number {\r\n        let itemLeft = this._getItemLeft( item)\r\n        return itemLeft + item.node.width\r\n    }\r\n\r\n    private _updateListView( idx: number = 0, pos: number = null) {\r\n        /// cur count\r\n        let checkcount = 0\r\n        let create = this.movement === Movement.Horizontal? this._updateHorizontal: this._updateVertical\r\n        while( create.call( this, idx, pos)) {\r\n            if( ++checkcount >= this.frameCreateMax) {\r\n                this._itemDirty = true\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    private _createTopItem( idx: number, y: number = null): LoopListItem {\r\n        let item = this._createNewItem( idx)\r\n        if( item) {\r\n            if( y == null) {\r\n                item.node.y = -this._getItemTop( item) + this._topBoundary - item.offset\r\n            } else {\r\n                item.node.y = y\r\n            }\r\n            this._items.push( item)\r\n        }\r\n        return item\r\n    }\r\n\r\n    /// 从新排序items\r\n    private _updateVerticalItems() {\r\n        if( this._items.length > 1) {\r\n            let pitem = this._items[0]\r\n            for( let idx=1; idx < this._items.length; idx++){\r\n                let item = this._items[idx]\r\n                item.node.y = pitem.node.y - pitem.node.height - item.padding\r\n                pitem = item\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateVertical( idx: number, pos: number) : boolean {\r\n        let curCount = this._items.length\r\n        /// recycle all items\r\n        if( this._totalcount == 0 && curCount > 0) {\r\n            this._recycleAllItems( true)\r\n            return false\r\n        }\r\n        /// fill up & fill down\r\n        if( curCount === 0) {\r\n            let item = this._createTopItem( idx, pos)\r\n            return item != null\r\n        }\r\n        /// recycle top item 回收顶部数据 如果最底下的item 是最后一条那么不回收上面的item\r\n        let topitem = this._items[0]\r\n        let bottomitem = this._items[ curCount-1]\r\n        let bottom_bottom = this._getItemBottom( bottomitem)\r\n        if( curCount > 1) {\r\n            /// recycle top item\r\n            let canRecycleTop = (bottomitem.itemIdx !== this._totalcount-1 || bottom_bottom < this._bottomBoundary)\r\n            if( canRecycleTop && this._getItemBottom( topitem) > (this.topBoundary + this._maxPadding)) {\r\n                this._items.splice( 0, 1)\r\n                this._recycle( topitem)\r\n                return true\r\n            } \r\n            /// recycle bottom item\r\n            if( topitem.itemIdx > 0 && this._getItemTop( bottomitem) < (this.bottomBoundary - this._maxPadding)) { \r\n                this._items.splice( curCount-1, 1)\r\n                this._recycle( bottomitem)\r\n                return true\r\n            }\r\n        }\r\n        /// create top item\r\n        if( this._getItemTop( topitem) < this.topBoundary) {\r\n            let item = this._createNewItem( topitem.itemIdx - 1)\r\n            if( item) {\r\n                item.node.y = topitem.node.y + item.padding + item.node.height\r\n                this._items.splice( 0, 0, item)\r\n                return true\r\n            }\r\n        }\r\n        /// create bottom item\r\n        if( bottom_bottom > this.bottomBoundary) {\r\n            let item = this._createNewItem( bottomitem.itemIdx + 1)\r\n            if( item) {\r\n                item.node.y = bottomitem.node.y - bottomitem.node.height - bottomitem.padding\r\n                this._items.push( item)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    private _createLeftItem( idx: number, x:number = null) : LoopListItem{\r\n        let item = this._createNewItem( idx)\r\n        if( item) {\r\n            if( x == null) {\r\n                item.node.x = -this._getItemLeft( item) + this._leftBoundary + item.offset\r\n            } else {\r\n                item.node.x = x\r\n            }\r\n            this._items.push( item)\r\n        }\r\n        return item\r\n    }\r\n\r\n    private _updateHorizontalItems(){\r\n        if( this._items.length > 1) {\r\n            let preitem = this._items[0]\r\n            for( let idx=1; idx < this._items.length; idx++){\r\n                let item = this._items[idx]\r\n                item.node.x = preitem.node.x + preitem.node.height + item.padding\r\n                preitem = item\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateHorizontal( idx: number, pos: number): boolean{\r\n        let curCount = this._items.length\r\n        /// recycle all items\r\n        if( this._totalcount == 0 && curCount > 0) {\r\n            this._recycleAllItems( true)\r\n            return false\r\n        }\r\n        /// fill up & fill down\r\n        if( curCount == 0) {\r\n            let item = this._createLeftItem( idx, pos)\r\n            return item != null? true: false\r\n        }\r\n        /// fill left & fill right\r\n        let leftItem = this._items[0]\r\n        let rightItem = this._items[ curCount-1]\r\n        let right_right = this._getItemRight( rightItem)\r\n        if( curCount > 1) {\r\n            /// recycle left item\r\n            let canRecycleLeft = (rightItem.itemIdx !== (this._totalcount - 1) || right_right > this.rightBoundary)\r\n            if( canRecycleLeft && this._getItemRight( leftItem) < (this.leftBoundary - this._maxPadding)) {\r\n                this._items.splice( 0, 1)\r\n                this._recycle( leftItem)\r\n                return true\r\n            }\r\n            /// recycle right item\r\n            if( leftItem.itemIdx > 0 && this._getItemLeft(rightItem) > (this.rightBoundary + this._maxPadding)) {\r\n                this._items.splice( curCount-1, 1)\r\n                this._recycle( rightItem)\r\n                return true\r\n            }\r\n        }\r\n        /// create left item\r\n        if( this._getItemLeft( leftItem) > this.leftBoundary) {\r\n            let item = this._createNewItem( leftItem.itemIdx - 1)\r\n            if( item) {\r\n                item.node.x = leftItem.node.x - item.node.width - item.padding \r\n                this._items.splice( 0, 0, item)\r\n                return true\r\n            }\r\n        }\r\n        /// create bottom item\r\n        if( right_right < this.rightBoundary) {\r\n            let item = this._createNewItem( rightItem.itemIdx + 1)\r\n            if( item) {\r\n                item.node.x = rightItem.node.x + rightItem.node.width + rightItem.padding\r\n                this._items.push( item)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    /// 计算边界 下面的函数都是重写scrollview 原有的函数\r\n    _calculateBoundary(){\r\n        if (this.content) {\r\n            this.content.setContentSize( cc.size( this.viewPort.width, this.viewPort.height))\r\n            /// view port\r\n            let viewSize = this.viewPort.getContentSize();\r\n            let anchorX = viewSize.width * this.viewPort.anchorX;\r\n            let anchorY = viewSize.height * this.viewPort.anchorY;\r\n            /// 计算上下左右窗口边界\r\n            this._leftBoundary  = -anchorX;\r\n            this._bottomBoundary = -anchorY;\r\n            this._rightBoundary = this._leftBoundary + viewSize.width;\r\n            this._topBoundary   = this._bottomBoundary + viewSize.height;\r\n            /// 计算上下左右 回收|创建 边界\r\n            this.leftBoundary   = this._leftBoundary - this.cacheBoundary\r\n            this.rightBoundary  = this._rightBoundary + this.cacheBoundary\r\n            this.topBoundary    = this._topBoundary + this.cacheBoundary\r\n            this.bottomBoundary = this._bottomBoundary - this.cacheBoundary\r\n\r\n            // console.log( \"boundary:\", this._topBoundary, this._bottomBoundary)\r\n        }\r\n    }\r\n\r\n    /// 裁剪移动量\r\n    _clampDelta (delta: cc.Vec2) {\r\n        return this._items.length > 0? delta: cc.Vec2.ZERO;\r\n    }\r\n\r\n    /// 重写该函数实现左边界回弹 \r\n    /// pageView 也可以在这里实现 & 通过判断当前正在viewport 的第一个item 然后返回该item 的与LeftBounddary的关系\r\n    _getContentLeftBoundary (){\r\n        if( this._items.length > 0) {\r\n            let item = this._items[0]\r\n            if( item.itemIdx === 0) {\r\n                return this._getItemLeft( item) - item.offset\r\n            }\r\n        }\r\n        return this._leftBoundary\r\n    }\r\n\r\n    /// 重写该函数实现右边界回弹\r\n    _getContentRightBoundary (){\r\n        if( this._items.length > 0) {\r\n            let item = this._items[this._items.length-1]\r\n            if( item.itemIdx === (this._totalcount -1)) {\r\n                return this._getItemRight( item)\r\n            }\r\n        }\r\n        return this._rightBoundary\r\n    }\r\n\r\n    /// 重写该函数实现上边界回弹\r\n    /// pageView 也可以在这里实现 & 通过判断当前正在viewport 的第一个item 然后返回该item 的与LeftBounddary的关系\r\n    _getContentTopBoundary () {\r\n        if( this._items.length > 0) {\r\n            let item = this._items[0]\r\n            if( item.itemIdx === 0) {\r\n                return this._getItemTop( item) + item.offset\r\n            }\r\n        }\r\n        return this._topBoundary\r\n    }\r\n\r\n    /// 重写该函数实现下边界回弹\r\n    _getContentBottomBoundary () {\r\n        if( this._items.length > 0) {\r\n            let item = this._items[this._items.length-1]\r\n            if ( item.itemIdx === (this._totalcount - 1)) {\r\n                return this._getItemBottom( item)\r\n            }\r\n        }\r\n        return this._bottomBoundary\r\n    }\r\n\r\n    // 重写该函数实现边界回弹\r\n    _getHowMuchOutOfBoundary (addition: cc.Vec2){\r\n        addition = addition || cc.v2(0, 0);\r\n        // 注释这行会造成回弹bug\r\n        if (addition.fuzzyEquals(cc.v2(0, 0), EPSILON) && !this._outOfBoundaryAmountDirty) {\r\n            return this._outOfBoundaryAmount;\r\n        }\r\n        let outOfBoundaryAmount = cc.v2(0, 0);\r\n        switch( this.movement) {\r\n            case Movement.Horizontal: {\r\n                /// 水平模式左右边界\r\n                outOfBoundaryAmount.y = 0\r\n                let left = this._getContentLeftBoundary() + addition.x\r\n                let right = this._getContentRightBoundary() + addition.x\r\n                if( left > this._leftBoundary) {\r\n                    outOfBoundaryAmount.x = this._leftBoundary - left\r\n                } else if( right < this._rightBoundary) {\r\n                    outOfBoundaryAmount.x = this._rightBoundary - right;\r\n                    let temp = left + outOfBoundaryAmount.x\r\n                    if( this._items.length > 0 && this._items[0].itemIdx === 0 && temp >= this._leftBoundary) {\r\n                        outOfBoundaryAmount.x = this._leftBoundary - left\r\n                    }\r\n                }\r\n                break\r\n            }\r\n            case Movement.Vertical:{\r\n                ///  垂直模式上下边界\r\n                outOfBoundaryAmount.x = 0\r\n                let top = this._getContentTopBoundary() + addition.y\r\n                let bottom = this._getContentBottomBoundary() + addition.y\r\n                if ( top < this._topBoundary) {\r\n                    outOfBoundaryAmount.y = this._topBoundary - top\r\n                } else if (bottom > this._bottomBoundary) {\r\n                    outOfBoundaryAmount.y = this._bottomBoundary - bottom;\r\n                    /// 判断第一条item 落下来是否会超过 topboundary 如果超过要重新计算\r\n                    let temp = top + outOfBoundaryAmount.y\r\n                    if( this._items.length > 0 && this._items[0].itemIdx === 0 && temp <= this._topBoundary) {\r\n                        outOfBoundaryAmount.y = this._topBoundary - top\r\n                    }\r\n                }\r\n                break\r\n            }\r\n        }\r\n        /// ？？？\r\n        if (addition.fuzzyEquals(cc.v2(0, 0), EPSILON)) {\r\n            this._outOfBoundaryAmount = outOfBoundaryAmount;\r\n            this._outOfBoundaryAmountDirty = false;\r\n        }\r\n        outOfBoundaryAmount = this._clampDelta(outOfBoundaryAmount);\r\n        return outOfBoundaryAmount;\r\n    }\r\n    \r\n    /// 获取scrollview 的私有属性\r\n    get _outOfBoundaryAmount(): cc.Vec2{\r\n        return this.scrollView._outOfBoundaryAmount\r\n    }\r\n\r\n    set _outOfBoundaryAmount(value: cc.Vec2){\r\n        this.scrollView._outOfBoundaryAmount = value\r\n    }\r\n\r\n    get _outOfBoundaryAmountDirty(): boolean{\r\n        return this.scrollView._outOfBoundaryAmountDirty\r\n    }\r\n\r\n    set _outOfBoundaryAmountDirty( value: boolean) {\r\n        this.scrollView._outOfBoundaryAmountDirty = value\r\n    }\r\n\r\n    get _scrolling(){\r\n        return this.scrollView._scrolling\r\n    }\r\n}\r\n\r\n"]}